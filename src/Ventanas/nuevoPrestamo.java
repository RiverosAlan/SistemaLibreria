/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Ventanas;

import JavaSql.JavaMySql;
import Ux.DtableL;
import Ux.DtableU;
import static Ventanas.Principal_Sistema.content;
import java.awt.BorderLayout;
import java.awt.Color;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.Period;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author Antonio
 */
public class nuevoPrestamo extends javax.swing.JPanel {

    JavaMySql conn;
    Connection reg, lib;
    boolean edition = false;
    int cp;
    String codp, f;
    DtableL t = new DtableL();
    DtableU u = new DtableU();

    /**
     * Creates new form Principal
     */
    public nuevoPrestamo() {
        initComponents();
        conn = new JavaMySql();
        reg = conn.conexion();

        titu.setText("NUEVO PRÉSTAMO");
        btn1.setText("CANCELAR PRÉSTAMO");
        btn2.setText("PRESTAR LIBRO");

        Date f = new Date();
        SimpleDateFormat fc = new SimpleDateFormat("dd/MM/yyyy");
        String fec = fc.format(f);

        TxtFechaP.setText(fec);
    }

    public nuevoPrestamo(String idp, String idusu, String idli, String fecp, String fecd, String ddi) {
        initComponents();

        String f = fecd;
        conn = new JavaMySql();
        reg = conn.conexion();

        codp = idp;
        TxtCI_UsuarioP.setText(idusu);
        TxtCodLibroP.setText(idli);
        TxtFechaP.setText(fecp);
        TxtDiasP.setText(ddi);
        edition = true;

        titu.setText("EDITAR PRÉSTAMO");
        btn1.setText("CANCELAR EDICION");
        btn2.setText("GUARDAR CAMBIOS");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        body = new javax.swing.JPanel();
        titu = new javax.swing.JLabel();
        Text2 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        TxtDiasP = new javax.swing.JTextField();
        GuardarP = new javax.swing.JPanel();
        btn2 = new javax.swing.JLabel();
        Text4 = new javax.swing.JLabel();
        TxtCI_UsuarioP = new javax.swing.JTextField();
        Text5 = new javax.swing.JLabel();
        TxtFechaP = new javax.swing.JTextField();
        Text3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        P_LibroList = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        P_UsuarioList = new javax.swing.JTable();
        Buscar_U = new javax.swing.JPanel();
        BuscarUs = new javax.swing.JLabel();
        BuscarLibroB = new javax.swing.JPanel();
        BuscarLi = new javax.swing.JLabel();
        selecCateg = new javax.swing.JComboBox<>();
        TxtCodLibroP = new javax.swing.JTextField();
        Text6 = new javax.swing.JLabel();
        Text7 = new javax.swing.JLabel();
        TxtCI_UsuarioB = new javax.swing.JTextField();
        Text8 = new javax.swing.JLabel();
        TxtNombreC = new javax.swing.JTextField();
        CancelarP = new javax.swing.JPanel();
        btn1 = new javax.swing.JLabel();
        Text9 = new javax.swing.JLabel();
        car_Lib = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setMinimumSize(new java.awt.Dimension(750, 430));
        setPreferredSize(new java.awt.Dimension(750, 430));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        body.setBackground(new java.awt.Color(255, 255, 255));
        body.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        add(body, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        titu.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        titu.setText("NUEVO PRÉSTAMO");
        add(titu, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 210, -1));

        Text2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        Text2.setText("Dias de Préstamo");
        add(Text2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 260, 120, -1));

        jSeparator1.setForeground(new java.awt.Color(51, 73, 84));
        jSeparator1.setPreferredSize(new java.awt.Dimension(200, 10));
        add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 360, 310, 12));

        jSeparator2.setForeground(new java.awt.Color(51, 73, 84));
        jSeparator2.setPreferredSize(new java.awt.Dimension(200, 10));
        add(jSeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 360, 260, 12));

        jSeparator3.setForeground(new java.awt.Color(51, 73, 84));
        jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator3.setPreferredSize(new java.awt.Dimension(200, 10));
        add(jSeparator3, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 50, 12, 310));

        TxtDiasP.setFont(new java.awt.Font("Microsoft YaHei UI Light", 1, 13)); // NOI18N
        TxtDiasP.setForeground(new java.awt.Color(51, 73, 84));
        TxtDiasP.setText("5");
        TxtDiasP.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        TxtDiasP.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                TxtDiasPMousePressed(evt);
            }
        });
        add(TxtDiasP, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 290, 40, 30));

        GuardarP.setBackground(new java.awt.Color(51, 73, 84));
        GuardarP.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        GuardarP.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                GuardarPMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                GuardarPMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                GuardarPMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                GuardarPMousePressed(evt);
            }
        });
        GuardarP.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btn2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btn2.setForeground(new java.awt.Color(255, 255, 255));
        btn2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        btn2.setText("PRESTAR LIBRO");
        btn2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btn2MousePressed(evt);
            }
        });
        GuardarP.add(btn2, new org.netbeans.lib.awtextra.AbsoluteConstraints(4, 5, 200, 40));

        add(GuardarP, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 370, 210, 50));

        Text4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        Text4.setText("Cod de Libro");
        add(Text4, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 120, 110, -1));

        TxtCI_UsuarioP.setFont(new java.awt.Font("Microsoft YaHei UI Light", 1, 13)); // NOI18N
        TxtCI_UsuarioP.setForeground(new java.awt.Color(51, 73, 84));
        TxtCI_UsuarioP.setText("Ingrese Carnet");
        TxtCI_UsuarioP.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        TxtCI_UsuarioP.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TxtCI_UsuarioPMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                TxtCI_UsuarioPMousePressed(evt);
            }
        });
        add(TxtCI_UsuarioP, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 80, 130, 30));

        Text5.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        Text5.setText("Categoría");
        add(Text5, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 190, 130, 20));

        TxtFechaP.setFont(new java.awt.Font("Microsoft JhengHei UI Light", 1, 13)); // NOI18N
        TxtFechaP.setForeground(new java.awt.Color(51, 73, 84));
        TxtFechaP.setText("Ingrese Fecha");
        TxtFechaP.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        TxtFechaP.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                TxtFechaPMousePressed(evt);
            }
        });
        add(TxtFechaP, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 220, 130, 30));

        Text3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        Text3.setText("Fecha de Préstamo");
        add(Text3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 190, 120, -1));

        P_LibroList.setBackground(new java.awt.Color(51, 73, 84));
        P_LibroList.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        P_LibroList.setFont(new java.awt.Font("Microsoft YaHei UI Light", 1, 13)); // NOI18N
        P_LibroList.setForeground(new java.awt.Color(255, 255, 255));
        P_LibroList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "COD DE LIBRO", "TÍTULO", "CATEGORÍA", "ESTADO"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        P_LibroList.setRowHeight(20);
        P_LibroList.getTableHeader().setReorderingAllowed(false);
        P_LibroList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                P_LibroListMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(P_LibroList);
        if (P_LibroList.getColumnModel().getColumnCount() > 0) {
            P_LibroList.getColumnModel().getColumn(0).setResizable(false);
            P_LibroList.getColumnModel().getColumn(1).setResizable(false);
            P_LibroList.getColumnModel().getColumn(2).setResizable(false);
            P_LibroList.getColumnModel().getColumn(3).setResizable(false);
        }

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 260, 550, 90));

        P_UsuarioList.setBackground(new java.awt.Color(51, 73, 84));
        P_UsuarioList.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        P_UsuarioList.setFont(new java.awt.Font("Microsoft YaHei UI Light", 1, 13)); // NOI18N
        P_UsuarioList.setForeground(new java.awt.Color(255, 255, 255));
        P_UsuarioList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "NOMBRES", "A. PATERNO", "A. MATERNO", "CEDULA DE IDENTIDAD", "CARRERA", "ESTADO"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                true, true, true, true, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        P_UsuarioList.setRowHeight(20);
        P_UsuarioList.setSelectionBackground(new java.awt.Color(102, 92, 252));
        P_UsuarioList.getTableHeader().setReorderingAllowed(false);
        P_UsuarioList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                P_UsuarioListMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                P_UsuarioListMouseEntered(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                P_UsuarioListMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                P_UsuarioListMouseReleased(evt);
            }
        });
        jScrollPane2.setViewportView(P_UsuarioList);
        if (P_UsuarioList.getColumnModel().getColumnCount() > 0) {
            P_UsuarioList.getColumnModel().getColumn(0).setResizable(false);
            P_UsuarioList.getColumnModel().getColumn(1).setResizable(false);
            P_UsuarioList.getColumnModel().getColumn(2).setResizable(false);
            P_UsuarioList.getColumnModel().getColumn(3).setResizable(false);
            P_UsuarioList.getColumnModel().getColumn(4).setResizable(false);
            P_UsuarioList.getColumnModel().getColumn(5).setResizable(false);
        }

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 100, 550, 90));

        Buscar_U.setBackground(new java.awt.Color(51, 73, 84));
        Buscar_U.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Buscar_U.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                Buscar_UMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                Buscar_UMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                Buscar_UMousePressed(evt);
            }
        });
        Buscar_U.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        BuscarUs.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        BuscarUs.setForeground(new java.awt.Color(255, 255, 255));
        BuscarUs.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        BuscarUs.setText("BUSCAR ");
        BuscarUs.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                BuscarUsMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                BuscarUsMousePressed(evt);
            }
        });
        Buscar_U.add(BuscarUs, new org.netbeans.lib.awtextra.AbsoluteConstraints(-3, 0, 160, 30));

        add(Buscar_U, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 60, 160, 30));

        BuscarLibroB.setBackground(new java.awt.Color(51, 73, 84));
        BuscarLibroB.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        BuscarLibroB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                BuscarLibroBMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                BuscarLibroBMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                BuscarLibroBMousePressed(evt);
            }
        });
        BuscarLibroB.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        BuscarLi.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        BuscarLi.setForeground(new java.awt.Color(255, 255, 255));
        BuscarLi.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        BuscarLi.setText("BUSCAR LIBRO");
        BuscarLi.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                BuscarLiMousePressed(evt);
            }
        });
        BuscarLibroB.add(BuscarLi, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 160, 30));

        add(BuscarLibroB, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 220, 160, 30));

        selecCateg.setFont(new java.awt.Font("Microsoft JhengHei UI Light", 1, 13)); // NOI18N
        selecCateg.setForeground(new java.awt.Color(51, 73, 84));
        selecCateg.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Ninguno", "Proyecto", "Tesis de Licenciatura", "Emprendimiento", "Perfil de Tesis", "Borrrador de Tesis" }));
        selecCateg.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        selecCateg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selecCategActionPerformed(evt);
            }
        });
        add(selecCateg, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 220, 140, 30));

        TxtCodLibroP.setFont(new java.awt.Font("Microsoft JhengHei UI Light", 1, 13)); // NOI18N
        TxtCodLibroP.setForeground(new java.awt.Color(51, 73, 84));
        TxtCodLibroP.setText("Ingrese cod Libro");
        TxtCodLibroP.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        TxtCodLibroP.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TxtCodLibroPMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                TxtCodLibroPMousePressed(evt);
            }
        });
        TxtCodLibroP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TxtCodLibroPActionPerformed(evt);
            }
        });
        add(TxtCodLibroP, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 150, 130, 30));

        Text6.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        Text6.setText("Cédula de Identidad");
        add(Text6, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, 140, -1));

        Text7.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        Text7.setText("Cédula de Identidad");
        add(Text7, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 30, 130, -1));

        TxtCI_UsuarioB.setFont(new java.awt.Font("Microsoft JhengHei UI Light", 1, 13)); // NOI18N
        TxtCI_UsuarioB.setForeground(new java.awt.Color(51, 73, 84));
        TxtCI_UsuarioB.setText("Ingrese Carnet");
        TxtCI_UsuarioB.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        TxtCI_UsuarioB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                TxtCI_UsuarioBMousePressed(evt);
            }
        });
        TxtCI_UsuarioB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TxtCI_UsuarioBActionPerformed(evt);
            }
        });
        TxtCI_UsuarioB.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TxtCI_UsuarioBKeyTyped(evt);
            }
        });
        add(TxtCI_UsuarioB, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 60, 140, 30));

        Text8.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        Text8.setText("Nombres de Estudiantes");
        add(Text8, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 30, 160, 20));

        TxtNombreC.setFont(new java.awt.Font("Microsoft YaHei UI Light", 1, 13)); // NOI18N
        TxtNombreC.setForeground(new java.awt.Color(51, 73, 84));
        TxtNombreC.setText("Ingrese Nombres");
        TxtNombreC.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        TxtNombreC.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                TxtNombreCMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                TxtNombreCMousePressed(evt);
            }
        });
        TxtNombreC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TxtNombreCActionPerformed(evt);
            }
        });
        add(TxtNombreC, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 60, 170, 30));

        CancelarP.setBackground(new java.awt.Color(51, 73, 84));
        CancelarP.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        CancelarP.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                CancelarPMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                CancelarPMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                CancelarPMousePressed(evt);
            }
        });
        CancelarP.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btn1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btn1.setForeground(new java.awt.Color(255, 255, 255));
        btn1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        btn1.setText("CANCELAR PRÉSTAMO");
        btn1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btn1MousePressed(evt);
            }
        });
        CancelarP.add(btn1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 5, 210, 40));

        add(CancelarP, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 370, 210, 50));

        Text9.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        Text9.setText("Carrera");
        add(Text9, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 190, 130, 20));

        car_Lib.setFont(new java.awt.Font("Microsoft JhengHei UI Light", 1, 13)); // NOI18N
        car_Lib.setForeground(new java.awt.Color(51, 73, 84));
        car_Lib.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Ninguno", "Ing de Sistemas y TIC", "Contaduría y Auditoria de Sistemas", "Ing Comercial y Empresarial", "Medicina Veterinaria", "Ing Civil", "Ing Zootecnica", "Ing Agronómica", "Arquitectura y Urbanismo", "Trabajo Social", "Ing de Hardware y Robótica", "Ing de Software y Multimedia" }));
        car_Lib.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        add(car_Lib, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 220, 170, 30));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Ventanas/usuarios.jpg"))); // NOI18N
        jLabel1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jLabel1MousePressed(evt);
            }
        });
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 60, 40, 30));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Ventanas/libros.jpg"))); // NOI18N
        jLabel2.setText("jLabel2");
        jLabel2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jLabel2MousePressed(evt);
            }
        });
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 220, 40, 30));
    }// </editor-fold>//GEN-END:initComponents

    private void TxtDiasPMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TxtDiasPMousePressed

    }//GEN-LAST:event_TxtDiasPMousePressed

    private void GuardarPMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_GuardarPMouseEntered

    }//GEN-LAST:event_GuardarPMouseEntered

    private void GuardarPMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_GuardarPMouseExited

    }//GEN-LAST:event_GuardarPMouseExited
    // PRESTAR
    private void GuardarPMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_GuardarPMousePressed


    }//GEN-LAST:event_GuardarPMousePressed
    public void EditP(String idp, String idU, String idL, String feP, String feD, String diD) throws SQLException {

        Statement s = reg.createStatement();
        s.executeUpdate("UPDATE `prestamo` SET `CodUsuario` = '" + idU + "', `CodLibro` = '" + idL + "', `fechaPr` = '" + feP + "', `fechaDe` = '" + feD + "', `DiasP` = '" + diD + "' WHERE `idPrestamo` = '" + idp + "'");
        javax.swing.JOptionPane.showMessageDialog(this, "¡Prestamo editado correctamente! \n", "HECHO", javax.swing.JOptionPane.INFORMATION_MESSAGE);

        Prestamo p1 = new Prestamo();
        p1.setSize(750, 430);
        p1.setLocation(0, 0);

        content.removeAll();
        content.add(p1, BorderLayout.CENTER);
        content.revalidate();
        content.repaint();
    }

    public void InsertP(String idp, String idU, String idL, String feP, String feD, String diD) throws SQLException {

        Statement stm = reg.createStatement();
        stm.executeUpdate("INSERT INTO `prestamo` (`idPrestamo`, `CodUsuario`, `CodLibro`,`fechaPr`, `fechaDe`, `DiasP`,`estado`) VALUES ('" + idp + "', '" + idU + "', '" + idL + "', '" + feP + "', '" + feD + "', '" + diD + "','Deudor')");
        javax.swing.JOptionPane.showMessageDialog(this, "¡Prestamo registrado correctamente! \n", "HECHO", javax.swing.JOptionPane.INFORMATION_MESSAGE);

        //JOptionPane.showMessageDialog(null," para recibo :"+idp);
        Prestamo p1 = new Prestamo();
        p1.setSize(750, 430);
        p1.setLocation(0, 0);

        content.removeAll();
        content.add(p1, BorderLayout.CENTER);
        content.revalidate();
        content.repaint();
    }

    public String DevuelveCodP() throws SQLException {
        Statement stm = reg.createStatement();
        ResultSet id = stm.executeQuery("SELECT * FROM `prestamo` ");
        String codigoP, cdo;
        int ext, max = 0;
        boolean sw = false;
        while (id.next()) {
            sw = true;
            cdo = id.getString("idPrestamo");
            ext = cdo.length();

            if (Integer.parseInt(cdo.substring(2, ext)) > max) {
                max = Integer.parseInt(cdo.substring(2, ext));
            }
        }

        if (sw) {
            codigoP = "PR" + (max + 1);
        } else {
            codigoP = "PR1";
        }

        return codigoP;

    }

    public String fechadeDev(String d) {

        String fechaD = "";
        //JOptionPane.showMessageDialog(null, "entro a modi fecha");
        int da = Integer.parseInt(d);
        LocalDate now = LocalDate.now();
        int year = now.getYear();
        int dia = now.getDayOfMonth();
        int month = now.getMonthValue();

        /*  JOptionPane.showMessageDialog(null, "año: "+year);
        JOptionPane.showMessageDialog(null, "año: "+dia);
        JOptionPane.showMessageDialog(null, "año: "+month);*/
        int ndia = 0;
        int nmonth = 0;
        int nyear = 0;

        switch (month) {
            case 1:
                if (dia <= 26) {
                    ndia = dia + da;
                    nmonth = month;
                    nyear = year;
                } else {
                    ndia = (dia + da) - 31;
                    nmonth = month + 1;
                    nyear = year;
                }
            case 2:
                if (bisiesto(year)) {
                    if (dia <= 24) {
                        ndia = dia + da;
                        nmonth = month;
                        nyear = year;
                    } else {
                        ndia = (dia + da) - 29;
                        nmonth = month + 1;
                        nyear = year;
                    }
                } else {
                    if (dia <= 23) {
                        ndia = dia + da;
                    } else {
                        ndia = (dia + da) - 28;
                        nmonth = month + 1;
                    }
                }

            case 3:
                if (dia <= 26) {
                    ndia = dia + da;
                } else {
                    ndia = (dia + da) - 31;
                    nmonth = month + 1;
                }
            case 4:
                if (dia <= 25) {
                    ndia = dia + da;
                } else {
                    ndia = (dia + da) - 30;
                    nmonth = month + 1;
                }
            case 5:
                if (dia <= 26) {
                    ndia = dia + da;
                } else {
                    ndia = (dia + da) - 31;
                    nmonth = month + 1;
                }
            case 6:
                if (dia <= 25) {
                    ndia = dia + da;
                } else {
                    ndia = (dia + da) - 30;
                    nmonth = month + 1;
                }
            case 7:
                if (dia <= 26) {
                    ndia = dia + da;
                } else {
                    ndia = (dia + da) - 31;
                    nmonth = month + 1;
                }
            case 8:
                if (dia <= 26) {
                    ndia = dia + da;
                } else {
                    ndia = (dia + da) - 31;
                    nmonth = month + 1;
                }
            case 9:
                if (dia <= 25) {
                    ndia = dia + da;
                } else {
                    ndia = (dia + da) - 30;
                    nmonth = month + 1;
                }
            case 10:
                if (dia <= 26) {
                    ndia = dia + da;
                } else {
                    ndia = (dia + da) - 31;
                    nmonth = month + 1;
                }
            case 11:
                if (dia <= 25) {
                    ndia = dia + da;
                } else {
                    ndia = (dia + da) - 30;
                    nmonth = month + 1;
                }
            case 12:
                if (dia <= 26) {
                    ndia = dia + da;
                    nmonth = month;
                    nyear = year;
                } else {
                    ndia = (dia + da) - 31;
                    nmonth = 1;
                    nyear = year + 1;
                }
        }

        //String dian =Integer.toString(ndia);
        if (ndia < 10 && nmonth < 10) {
            fechaD = "0" + ndia + "/0" + nmonth + "/" + nyear;
        } else {
            if (ndia < 10) {
                fechaD = "0" + ndia + "/" + nmonth + "/" + nyear;
            } else {
                if (nmonth < 10) {
                    fechaD = ndia + "/0" + nmonth + "/" + nyear;
                }
            }
        }
        return fechaD;
    }

    public boolean bisiesto(int ano) {

        if ((ano % 4 == 0 && ano % 100 != 0) || ano % 400 == 0) {
            return true;
        } else {
            return false;
        }
    }
    private void TxtCI_UsuarioPMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TxtCI_UsuarioPMousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_TxtCI_UsuarioPMousePressed

    private void TxtFechaPMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TxtFechaPMousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_TxtFechaPMousePressed

    private void P_LibroListMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_P_LibroListMousePressed
        int idcell = P_LibroList.getSelectedRow();
        if (P_LibroList.getValueAt(idcell, 3).toString().equals("Prestado")) {
            String titulo = P_LibroList.getValueAt(idcell, 1).toString();
            String categoria = P_LibroList.getValueAt(idcell, 2).toString();
            TxtCodLibroP.setText("Ingrese cod Libro");

            JOptionPane.showMessageDialog(null, "Titulo: " + titulo + "\n Categoria: " + categoria + "\n Estado: Actualmente el libro esta prestado", "BIBLIOTECA UNIVERSITARIA", JOptionPane.WARNING_MESSAGE);
        } else {
            if (P_LibroList.getValueAt(idcell, 3).toString().equals("Disponible")) {
                String titulo = P_LibroList.getValueAt(idcell, 1).toString();
                String categoria = P_LibroList.getValueAt(idcell, 2).toString();
                JOptionPane.showMessageDialog(null, "Titulo: " + titulo + "\n Categoria: " + categoria + "\n Estado: El Libro esta Disponible", "BIBLIOTECA UNIVERSITARIA", JOptionPane.INFORMATION_MESSAGE);
                TxtCodLibroP.setText(P_LibroList.getValueAt(idcell, 0).toString());
            } else {
                if (P_LibroList.getValueAt(idcell, 3).toString().equals("No Disponible")) {
                    String titulo = P_LibroList.getValueAt(idcell, 1).toString();
                    String categoria = P_LibroList.getValueAt(idcell, 2).toString();
                    JOptionPane.showMessageDialog(null, "Titulo: " + titulo + "\n Categoria: " + categoria + "\n Estado: El Libro No ha sido Devuelto", "BIBLIOTECA UNIVERSITARIA", JOptionPane.WARNING_MESSAGE);
                    TxtCodLibroP.setText("Ingrese cod Libro");
                }
            }
        }

    }//GEN-LAST:event_P_LibroListMousePressed

    private void P_UsuarioListMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_P_UsuarioListMousePressed

        int idcell = P_UsuarioList.getSelectedRow();

        if (P_UsuarioList.getValueAt(idcell, 5).toString().equals("Deudor")) {
            String nombreC = P_UsuarioList.getValueAt(idcell, 0).toString() + " " + P_UsuarioList.getValueAt(idcell, 1).toString() + " " + P_UsuarioList.getValueAt(idcell, 2).toString();
            String carnet = P_UsuarioList.getValueAt(idcell, 3).toString();
            TxtCI_UsuarioP.setText("Ingrese Carnet");
            JOptionPane.showMessageDialog(null, "Estudiante: " + nombreC + "\n Cedula de Identidad: " + carnet + "\n Estado: Actualmente es Deudor", "BIBLIOTECA UNIVERSITARIA", JOptionPane.WARNING_MESSAGE);

        } else {
            if (P_UsuarioList.getValueAt(idcell, 5).toString().equals("moroso")) {

                String nombreC = P_UsuarioList.getValueAt(idcell, 0).toString() + " " + P_UsuarioList.getValueAt(idcell, 1).toString() + " " + P_UsuarioList.getValueAt(idcell, 2).toString();
                String carnet = P_UsuarioList.getValueAt(idcell, 3).toString();
                TxtCI_UsuarioP.setText("Ingrese Carnet");
                JOptionPane.showMessageDialog(null, "Estudiante: " + nombreC + "\n Cedula de Identidad: " + carnet + "\n Estado: Actualmente es Deudor Moroso", "BIBLIOTECA UNIVERSITARIA", JOptionPane.WARNING_MESSAGE);

            } else {
                String nombreC = P_UsuarioList.getValueAt(idcell, 0).toString() + " " + P_UsuarioList.getValueAt(idcell, 1).toString() + " " + P_UsuarioList.getValueAt(idcell, 2).toString();
                String carnet = P_UsuarioList.getValueAt(idcell, 3).toString();
                TxtCI_UsuarioP.setText("Ingrese Carnet");
                JOptionPane.showMessageDialog(null, "Estudiante: " + nombreC + "\n Cedula de Identidad: " + carnet + "\n Estado: Disponible para Prestamo", "BIBLIOTECA UNIVERSITARIA", JOptionPane.INFORMATION_MESSAGE);
                TxtCI_UsuarioP.setText(P_UsuarioList.getValueAt(idcell, 3).toString());
            }
        }

        //TxtCI_UsuarioP.setText(list[idcell][3]);

    }//GEN-LAST:event_P_UsuarioListMousePressed

    private String Disponible(String c_lib) {
        String dis = "", estado = "";
        boolean sw = false;
        Statement stm;
        try {
            stm = reg.createStatement();
            ResultSet re = stm.executeQuery("SELECT `estado` FROM `prestamo` WHERE `CodLibro` LIKE '" + c_lib + "'");

            while (re.next()) {
                estado = re.getString("estado");
            }

            if (estado.equals("Deudor")) {
                dis = "Prestado";
            } else {
                if (estado.equals("No Deudor")) {
                    dis = "Disponible";
                } else {
                    if (estado.equals("moroso")) {
                        dis = "No Disponible";
                    } else {
                        dis = "Disponible";
                    }

                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(nuevoPrestamo.class.getName()).log(Level.SEVERE, null, ex);
        }

        return dis;

    }


    private void Buscar_UMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Buscar_UMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_Buscar_UMouseEntered

    private void Buscar_UMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Buscar_UMouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_Buscar_UMouseExited

    private void Buscar_UMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Buscar_UMousePressed
        // Abrir sección
        try {

            String cib = TxtCI_UsuarioB.getText();
            String nomb = TxtNombreC.getText();

            Statement stm = reg.createStatement();

            ResultSet counter = stm.executeQuery("SELECT * FROM `usuario` WHERE nombre LIKE '" + nomb + "' OR idUsuario LIKE '" + cib + "'");

            int count = 0;
            while (counter.next()) {
                count++;
            }

            String list[][] = new String[count][4];
            int i = 0;
            ResultSet re = stm.executeQuery("SELECT * FROM `usuario` WHERE nombre LIKE '" + nomb + "' OR idUsuario LIKE '" + cib + "'");
            while (re.next()) {

                list[i][0] = re.getString("nombre");
                list[i][1] = re.getString("apP");
                list[i][2] = re.getString("apM");
                list[i][3] = re.getString("ci");

                i++;
            }

            P_UsuarioList.setModel(new javax.swing.table.DefaultTableModel(
                    list,
                    new String[]{
                        "NOMBRE", "A. PATERNO", "A. MATERNO", "CEDULA DE IDENTIDAD"
                    }));
        } catch (SQLException ex) {
            Logger.getLogger(Usuario.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_Buscar_UMousePressed

    private void BuscarLiMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BuscarLiMousePressed
        // Abrir sección

        String cate = (String) selecCateg.getSelectedItem();
        String lib_car = (String) car_Lib.getSelectedItem();

        if (!cate.equals("ninguno") || !lib_car.equals("ninguno")) {

            if (!cate.equals("ninguno") && !lib_car.equals("ninguno")) {
                try {
                    Statement stm = reg.createStatement();

                    ResultSet counter = stm.executeQuery("SELECT * FROM `libro` WHERE carrera LIKE '" + lib_car + "' AND categoria LIKE '" + cate + "'");

                    int count = 0;
                    while (counter.next()) {
                        count++;
                    }

                    String list[][] = new String[count][4];
                    int i = count;
                    String codl;

                    ResultSet re = stm.executeQuery("SELECT * FROM `libro` WHERE carrera LIKE '" + lib_car + "' AND categoria LIKE '" + cate + "'");

                    while (re.next()) {
                        i--;
                        list[i][0] = re.getString("idlibro");
                        list[i][1] = re.getString("titulo");
                        list[i][2] = re.getString("categoria");
                        list[i][3] = Disponible(re.getString("idlibro"));

                    }

                    P_LibroList.setModel(new javax.swing.table.DefaultTableModel(
                            list,
                            new String[]{
                                "COD DE LIBRO", "TITULO", "CATEGORIA", "DISPONIBLE"
                            }));

                    P_LibroList.setDefaultRenderer(P_LibroList.getColumnClass(3), t);

                } catch (SQLException ex) {
                    Logger.getLogger(Usuario.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else {

                if (!cate.equals("ninguno")) {
                    try {
                        Statement stm = reg.createStatement();

                        ResultSet counter = stm.executeQuery("SELECT * FROM `libro` WHERE categoria LIKE '" + cate + "'");

                        int count = 0;
                        while (counter.next()) {
                            count++;
                        }

                        String list[][] = new String[count][4];
                        int i = count;
                        String codl;

                        ResultSet re = stm.executeQuery("SELECT * FROM `libro` WHERE categoria LIKE '" + cate + "'");

                        while (re.next()) {
                            i--;
                            list[i][0] = re.getString("idlibro");
                            list[i][1] = re.getString("titulo");
                            list[i][2] = re.getString("categoria");
                            list[i][3] = Disponible(re.getString("idlibro"));

                        }

                        P_LibroList.setModel(new javax.swing.table.DefaultTableModel(
                                list,
                                new String[]{
                                    "COD DE LIBRO", "TITULO", "CATEGORIA", "DISPONIBLE"
                                }));
                        P_LibroList.setDefaultRenderer(P_LibroList.getColumnClass(3), t);

                    } catch (SQLException ex) {
                        Logger.getLogger(Usuario.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } else {
                    if (!lib_car.equals("ninguno")) {
                        try {
                            Statement stm = reg.createStatement();

                            ResultSet counter = stm.executeQuery("SELECT * FROM `libro` WHERE carrera LIKE '" + lib_car + "'");

                            int count = 0;
                            while (counter.next()) {
                                count++;
                            }

                            String list[][] = new String[count][4];
                            int i = count;
                            String codl;

                            ResultSet re = stm.executeQuery("SELECT * FROM `libro` WHERE carrera LIKE '" + lib_car + "'");

                            while (re.next()) {
                                i--;
                                list[i][0] = re.getString("idlibro");
                                list[i][1] = re.getString("titulo");
                                list[i][2] = re.getString("categoria");
                                list[i][3] = Disponible(re.getString("idlibro"));

                            }

                            P_LibroList.setModel(new javax.swing.table.DefaultTableModel(
                                    list,
                                    new String[]{
                                        "COD DE LIBRO", "TITULO", "CATEGORIA", "DISPONIBLE"
                                    }));

                            P_LibroList.setDefaultRenderer(P_LibroList.getColumnClass(3), t);
                        } catch (SQLException ex) {
                            Logger.getLogger(Usuario.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }

            }
        } //--------------------------------------------------------------
        else {
            JOptionPane.showMessageDialog(null, "DEBE INGRESAR AL MENOS UN DATO");
        }
    }//GEN-LAST:event_BuscarLiMousePressed

    public boolean buscarLP(String codli) throws SQLException {
        boolean sw = false;

        Statement stm = reg.createStatement();
        ResultSet counter = stm.executeQuery("SELECT * FROM `prestamo` WHERE CodLibro LIKE '" + codli + "'");

        if (counter.next()) {
            sw = true;
        }

        return sw;
    }

    private void BuscarLibroBMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BuscarLibroBMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_BuscarLibroBMouseEntered

    private void BuscarLibroBMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BuscarLibroBMouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_BuscarLibroBMouseExited

    private void BuscarLibroBMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BuscarLibroBMousePressed
        // Abrir sección
        try {

            String cate = (String) selecCateg.getSelectedItem();
            String nomb = TxtNombreC.getText();

            Statement stm = reg.createStatement();
            ResultSet counter = stm.executeQuery("SELECT * FROM `libro` WHERE titulo LIKE '" + nomb + "' OR categoria LIKE '" + cate + "'");

            int count = 0;
            while (counter.next()) {
                count++;
            }
            //JOptionPane.showMessageDialog(this,count);
            String list[][] = new String[count][4];
            int i = 0;
            ResultSet re = stm.executeQuery("SELECT * FROM `libro` WHERE titulo LIKE '" + nomb + "' OR categoria LIKE '" + cate + "'");
            while (re.next()) {

                list[i][0] = re.getString("idlibro");
                list[i][1] = re.getString("titulo");
                list[i][2] = re.getString("categoria");
                list[i][3] = re.getString("disponible");

                i++;
            }

            P_LibroList.setModel(new javax.swing.table.DefaultTableModel(
                    list,
                    new String[]{
                        "Cod de Libro", "Titulo", "Categoria", "Disponible"
                    }));
        } catch (SQLException ex) {
            Logger.getLogger(Usuario.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_BuscarLibroBMousePressed

    private void selecCategActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selecCategActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_selecCategActionPerformed

    private void TxtCodLibroPMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TxtCodLibroPMousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_TxtCodLibroPMousePressed

    private void TxtCodLibroPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TxtCodLibroPActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TxtCodLibroPActionPerformed

    private void TxtCI_UsuarioBMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TxtCI_UsuarioBMousePressed
        if (TxtCI_UsuarioB.getText().equals("Ingrese Carnet")) {
            TxtCI_UsuarioB.setText("");
        }
    }//GEN-LAST:event_TxtCI_UsuarioBMousePressed

    private void TxtCI_UsuarioBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TxtCI_UsuarioBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TxtCI_UsuarioBActionPerformed

    private void TxtNombreCMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TxtNombreCMousePressed
        if (TxtNombreC.getText().equals("Ingrese Nombres")) {
            TxtNombreC.setText("");
        }         // TODO add your handling code here:
    }//GEN-LAST:event_TxtNombreCMousePressed

    private void TxtNombreCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TxtNombreCActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TxtNombreCActionPerformed

    private void btn1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn1MousePressed
        // Abrir sección
        Prestamo p1 = new Prestamo();
        p1.setSize(750, 430);
        p1.setLocation(0, 0);

        content.removeAll();
        content.add(p1, BorderLayout.CENTER);
        content.revalidate();
        content.repaint();
    }//GEN-LAST:event_btn1MousePressed

    private void CancelarPMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CancelarPMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_CancelarPMouseEntered

    private void CancelarPMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CancelarPMouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_CancelarPMouseExited

    private void CancelarPMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CancelarPMousePressed
        // Abrir sección
        NuevoUsuario p1 = new NuevoUsuario();
        p1.setSize(750, 430);
        p1.setLocation(0, 0);

        content.removeAll();
        content.add(p1, BorderLayout.CENTER);
        content.revalidate();
        content.repaint();
    }//GEN-LAST:event_CancelarPMousePressed

    private void BuscarUsMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BuscarUsMousePressed
        // Abrir sección

        String cib = TxtCI_UsuarioB.getText();
        String nomb = TxtNombreC.getText();

        if ((!cib.equals("Ingrese Carnet") && !cib.equals("")) || (!nomb.equals("Ingrese Nombres") && !nomb.equals(""))) {
            if ((!cib.equals("Ingrese Carnet") && !cib.equals("")) && (!nomb.equals("Ingrese Nombres") && !nomb.equals(""))) {
                try {
                    Statement stm = reg.createStatement();
                    ResultSet counter = stm.executeQuery("SELECT * FROM `usuario` WHERE nombre LIKE '" + nomb + "' AND matricula LIKE '" + cib + "'");

                    int count = 0;
                    while (counter.next()) {
                        count++;
                    }
                    //JOptionPane.showMessageDialog(this,count);
                    String list[][] = new String[count][6];
                    int i = count;
                    ResultSet re = stm.executeQuery("SELECT * FROM `usuario` WHERE nombre LIKE '" + nomb + "' AND matricula LIKE '" + cib + "'");
                    while (re.next()) {

                        i--;
                        list[i][0] = re.getString("nombre");
                        list[i][1] = re.getString("apP");
                        list[i][2] = re.getString("apM");
                        list[i][3] = re.getString("matricula");
                        list[i][4] = re.getString("carrera");
                        list[i][5] = EstadoU(re.getString("matricula"));

                    }

                    P_UsuarioList.setModel(new javax.swing.table.DefaultTableModel(
                            list,
                            new String[]{
                                "NOMBRE", "A. PATERNO", "A. MATERNO", "CEDULA DE IDENTIDAD", "CARRERA", "ESTADO"
                            }));
                    P_UsuarioList.setDefaultRenderer(P_UsuarioList.getColumnClass(5), u);
                } catch (SQLException ex) {
                    Logger.getLogger(Usuario.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                if (!cib.equals("Ingrese Carnet") && !cib.equals("")) {
                    try {
                        Statement stm = reg.createStatement();
                        ResultSet counter = stm.executeQuery("SELECT * FROM `usuario` WHERE matricula LIKE '" + cib + "'");

                        int count = 0;
                        while (counter.next()) {
                            count++;
                        }
                        //JOptionPane.showMessageDialog(this,count);
                        String list[][] = new String[count][6];
                        int i = count;
                        ResultSet re = stm.executeQuery("SELECT * FROM `usuario` WHERE matricula LIKE '" + cib + "'");
                        while (re.next()) {

                            i--;
                            list[i][0] = re.getString("nombre");
                            list[i][1] = re.getString("apP");
                            list[i][2] = re.getString("apM");
                            list[i][3] = re.getString("matricula");
                            list[i][4] = re.getString("carrera");
                            list[i][5] = EstadoU(re.getString("matricula"));

                        }

                        P_UsuarioList.setModel(new javax.swing.table.DefaultTableModel(
                                list,
                                new String[]{
                                    "NOMBRE", "A. PATERNO", "A. MATERNO", "CEDULA DE IDENTIDAD", "CARRERA", "ESTADO"
                                }));
                        P_UsuarioList.setDefaultRenderer(P_UsuarioList.getColumnClass(5), u);
                    } catch (SQLException ex) {
                        Logger.getLogger(Usuario.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } else {
                    if (!nomb.equals("Ingrese Nombres") && !nomb.equals("")) {
                        try {
                            Statement stm = reg.createStatement();
                            ResultSet counter = stm.executeQuery("SELECT * FROM `usuario` WHERE nombre LIKE '" + nomb + "'");

                            int count = 0;
                            while (counter.next()) {
                                count++;
                            }

                            String list[][] = new String[count][6];
                            int i = count;
                            ResultSet re = stm.executeQuery("SELECT * FROM `usuario` WHERE nombre LIKE '" + nomb + "'");
                            while (re.next()) {

                                i--;
                                list[i][0] = re.getString("nombre");
                                list[i][1] = re.getString("apP");
                                list[i][2] = re.getString("apM");
                                list[i][3] = re.getString("matricula");
                                list[i][4] = re.getString("carrera");
                                list[i][5] = EstadoU(re.getString("matricula"));

                            }

                            P_UsuarioList.setModel(new javax.swing.table.DefaultTableModel(
                                    list,
                                    new String[]{
                                        "NOMBRE", "A. PATERNO", "A. MATERNO", "CEDULA DE IDENTIDAD", "CARRERA", "ESTADO"
                                    }));
                            P_UsuarioList.setDefaultRenderer(P_UsuarioList.getColumnClass(5), u);
                        } catch (SQLException ex) {
                            Logger.getLogger(Usuario.class.getName()).log(Level.SEVERE, null, ex);
                        }

                    }
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "DEBE INGRESAR AL MENOS UN DATO");
        }
    }//GEN-LAST:event_BuscarUsMousePressed

    private void btn2MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn2MousePressed

        if ((!TxtCI_UsuarioP.getText().equals("Ingrese Carnet") && !TxtCI_UsuarioP.getText().equals("")) && (!TxtCodLibroP.getText().equals("Ingrese cod Libro") && !TxtCodLibroP.getText().equals(""))) {
            String codU = TxtCI_UsuarioP.getText();
            String codL = TxtCodLibroP.getText();
            String fechP = TxtFechaP.getText();
            String diaD = TxtDiasP.getText();

            if (codU == null || "".equals(codU) || codL == null || "".equals(codL) || fechP == null || "".equals(fechP) || diaD == null || "".equals(diaD)) {
                javax.swing.JOptionPane.showMessageDialog(this, "Debe llenar todos los campos \n", "AVISO", javax.swing.JOptionPane.INFORMATION_MESSAGE);

            } else {
                try {
                    if (edition) {
                        EditP(codp, codU, codL, fechP, f, diaD);
                    } else {
                        InsertP(DevuelveCodP(), codU, codL, fechP, fechadeDev(diaD), diaD);
                    }

                } catch (SQLException ex) {
                    Logger.getLogger(nuevoPrestamo.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

        } else {

            JOptionPane.showMessageDialog(this, "Debe llenar Carnet de Identidad y Cod de Libro \n ", "AVISO", javax.swing.JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btn2MousePressed

    private String EstadoU(String IDU) throws SQLException {
        String estado = "";
        boolean sw = false;

        Statement stm = reg.createStatement();
        ResultSet counter = stm.executeQuery("SELECT `estado` FROM `prestamo` WHERE `CodUsuario` LIKE '" + IDU + "'");

        while (counter.next()) {
            estado = counter.getString("estado");
        }

        return estado;
    }


    private void GuardarPMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_GuardarPMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_GuardarPMouseClicked

    private void jLabel1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MousePressed

        try {
            Statement stm = reg.createStatement();
            ResultSet res = stm.executeQuery("SELECT * FROM usuario");
            int c = 0;
            while (res.next()) {
                c++;
            }

            String list[][] = new String[c][6];

            ResultSet re = stm.executeQuery("SELECT * FROM usuario");
            int i = c;
            while (re.next()) {
                i--;

                list[i][0] = re.getString("nombre");
                list[i][1] = re.getString("apP");
                list[i][2] = re.getString("apM");
                list[i][3] = re.getString("matricula");
                list[i][4] = re.getString("carrera");
                String e = EstadoU(re.getString("matricula"));
                if (e.equals("moroso")) {
                    list[i][5] = e;
                } else {
                    if (e.equals("")) {
                        list[i][5] = "No Deudor";
                    } else {
                        list[i][5] = e;
                    }

                }

            }

            P_UsuarioList.setModel(new javax.swing.table.DefaultTableModel(
                    list,
                    new String[]{
                        "NOMBRE", "A. PATERNO", "A. MATERNO", "CEDULA DE IDENTIDAD", "CARRERA", "ESTADO"
                    }));

            P_UsuarioList.setDefaultRenderer(P_UsuarioList.getColumnClass(5), u);
        } catch (SQLException ex) {
            Logger.getLogger(nuevoPrestamo.class.getName()).log(Level.SEVERE, null, ex);
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel1MousePressed

    private void BuscarUsMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BuscarUsMouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_BuscarUsMouseExited

    private void jLabel2MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MousePressed
        try {
            Statement stm = reg.createStatement();

            ResultSet counter = stm.executeQuery("SELECT * FROM `libro`");

            int count = 0;
            while (counter.next()) {
                count++;
            }

            String list[][] = new String[count][4];
            int i = count;
            String codl;

            ResultSet re = stm.executeQuery("SELECT * FROM `libro`");

            while (re.next()) {
                i--;
                list[i][0] = re.getString("idlibro");
                list[i][1] = re.getString("titulo");
                list[i][2] = re.getString("categoria");
                list[i][3] = Disponible(re.getString("idlibro"));

            }

            P_LibroList.setModel(new javax.swing.table.DefaultTableModel(
                    list,
                    new String[]{
                        "COD DE LIBRO", "TITULO", "CATEGORIA", "DISPONIBLE"
                    }));
            P_LibroList.setDefaultRenderer(P_LibroList.getColumnClass(3), t);

        } catch (SQLException ex) {
            Logger.getLogger(Usuario.class.getName()).log(Level.SEVERE, null, ex);
        }

// TODO add your handling code here:
    }//GEN-LAST:event_jLabel2MousePressed

    private void P_UsuarioListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_P_UsuarioListMouseClicked

    }//GEN-LAST:event_P_UsuarioListMouseClicked

    private void P_UsuarioListMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_P_UsuarioListMouseReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_P_UsuarioListMouseReleased

    private void P_UsuarioListMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_P_UsuarioListMouseEntered

    }//GEN-LAST:event_P_UsuarioListMouseEntered

    private void TxtNombreCMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TxtNombreCMouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_TxtNombreCMouseExited

    private void TxtCI_UsuarioBKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtCI_UsuarioBKeyTyped
        buscarPrestamo();
    }//GEN-LAST:event_TxtCI_UsuarioBKeyTyped

    private void TxtCI_UsuarioPMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TxtCI_UsuarioPMouseClicked
       TxtCI_UsuarioP.setText("");
    }//GEN-LAST:event_TxtCI_UsuarioPMouseClicked

    private void TxtCodLibroPMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TxtCodLibroPMouseClicked
        TxtCodLibroP.setText("");
    }//GEN-LAST:event_TxtCodLibroPMouseClicked

    void setColor(JPanel panel) {
        panel.setBackground(new Color(21, 101, 192));
    }

    void resetColor(JPanel panel) {
        panel.setBackground(new Color(18, 90, 173));
    }

    //por aqui
    public boolean UserExist(String id) throws SQLException {
        boolean res = false;
        Statement stm = reg.createStatement();
        ResultSet re = stm.executeQuery("SELECT `matricula` FROM `usuario` WHERE `matricula` = '" + id + "' LIMIT 1");
        if (re.next()) {
            res = true;
        }

        return res;
    }

    public boolean BookExist(String bookid) throws SQLException {
        boolean res = false;
        Statement stm = reg.createStatement();
        ResultSet re = stm.executeQuery("SELECT `idlibro` FROM `libro` WHERE `idlibro` = '" + bookid + "' LIMIT 1");
        if (re.next()) {
            res = true;
        }

        return res;
    }

    public boolean BookAvailable(String bookid) throws SQLException {
        boolean res = false;
        Statement stm = reg.createStatement();
        ResultSet re = stm.executeQuery("SELECT `available` FROM `books` WHERE `id` = '" + bookid + "' LIMIT 1");
        if (re.next()) {
            int av = Integer.parseInt(re.getString("available"));
            if (av >= 1) {
                res = true;
            }
        }

        return res;
    }

    public boolean CheckSanction(int userid, String bookid) throws SQLException, ParseException {
        boolean res = false;
        Statement stm = reg.createStatement();
        ResultSet re = stm.executeQuery("SELECT * FROM `lendings` WHERE `id` = '" + bookid + "' AND `user_id` = '" + userid + "' LIMIT 1");
        System.out.println("1");
        if (re.next()) {
            System.out.println("2");
            Date ahora = new Date();
            Date returned = deStringToDate(re.getString("date_return"));
            System.out.println("2");
            int days = diferenciasDeFechas(returned, ahora);
            System.out.println("3");
            System.out.println(days);
            int days2 = diferenciasDeFechas(ahora, returned);
            System.out.println(days2);
            if (days <= 0) {
                res = true;
            }
            System.out.println("4");
        }
        System.out.println("5");
        return res;
    }

    public boolean CheckLending(String userid, String bookid) throws SQLException {
        boolean res = false;
        Statement stm = reg.createStatement();
        ResultSet re = stm.executeQuery("SELECT * FROM `prestamo` WHERE `CodUsuario` = '" + userid + "' AND `CodLibro` = '" + bookid + "'");
        if (re.next()) {
            res = true;
        }

        return res;
    }

    public void InsertLending(int id, String bookid) throws SQLException {
        Statement stm = reg.createStatement();
        String date = getFechaActual();
        Date ahora = new Date();
        Date devol = sumarFechasDias(ahora, 5);//Sumamos 5 días a la fecha actual.
        SimpleDateFormat formateador = new SimpleDateFormat("dd-MM-yyyy");
        String dev = formateador.format(devol);
        stm.executeUpdate("INSERT INTO `lendings` (`id`, `user_id`, `book_id`, `date_out`, `date_return`) VALUES (NULL, '" + id + "', '" + bookid + "', '" + date + "', '" + dev + "')");
        stm.executeUpdate("UPDATE `books` SET `available` = available-1 WHERE `id` = '" + bookid + "';");
        javax.swing.JOptionPane.showMessageDialog(this, "¡Prestamo realizado correctamente! \n", "HECHO", javax.swing.JOptionPane.INFORMATION_MESSAGE);

    }

    public void Devolutions(String fo, String bookid) throws SQLException, ParseException {
        Statement stm = reg.createStatement();
        String f;
        f = getFechaActual();
        stm.executeUpdate("INSERT INTO `devolucion` (`iddevolucion`, `fechad`, `regU`, `regl`) VALUES ( '" + coddevolucion() + "', '" + f + "', '" + fo + "', '" + bookid + "')");
        JOptionPane.showMessageDialog(this, "Libro Devuelto Correctamente...");
        stm.executeUpdate("DELETE FROM `prestamo` WHERE `CodLibro` = '" + bookid + "' AND `CodUsuario` = '" + fo + "' LIMIT 1");

    }

    public String coddevolucion() throws SQLException, ParseException {
        Statement stm = reg.createStatement();
        ResultSet id = stm.executeQuery("SELECT `iddevolucion` FROM `devolucion` ");
        String cdo = null;

        int aux = 0;
        while (id.next()) {
            cdo = id.getString("iddevolucion");

        }
        if (cdo != null) {
            int ext = cdo.length();
            aux = Integer.parseInt(cdo.substring(2, ext)) + 1;

            return "PR" + aux;
        } else {
            aux = aux + 1;
            return "PR" + aux;
        }
    }

    public static String getFechaActual() {
        Date ahora = new Date();
        SimpleDateFormat formateador = new SimpleDateFormat("dd-MM-yyyy");
        return formateador.format(ahora);
    }

    public static java.sql.Date sumarFechasDias(java.util.Date fch, int dias) {
        Calendar cal = new GregorianCalendar();
        cal.setTimeInMillis(fch.getTime());
        cal.add(Calendar.DATE, dias);
        return new java.sql.Date(cal.getTimeInMillis());
    }

    //Diferencias entre dos fechas
    //@param fechaInicial La fecha de inicio
    //@param fechaFinal  La fecha de fin
    //@return Retorna el numero de dias entre dos fechas
    public static synchronized int diferenciasDeFechas(Date fechaInicial, Date fechaFinal) throws ParseException {

        DateFormat df = DateFormat.getDateInstance(DateFormat.MEDIUM);
        String fechaInicioString = df.format(fechaInicial);
        try {
            fechaInicial = df.parse(fechaInicioString);
        } catch (ParseException ex) {
        }

        String fechaFinalString = df.format(fechaFinal);
        fechaFinal = df.parse(fechaFinalString);

        long fechaInicialMs = fechaInicial.getTime();
        long fechaFinalMs = fechaFinal.getTime();
        long diferencia = fechaFinalMs - fechaInicialMs;
        double dias = Math.floor(diferencia / (1000 * 60 * 60 * 24));
        return ((int) dias);
    }

    //Devuele un java.util.Date desde un String en formato dd-MM-yyyy
    //@param La fecha a convertir a formato date
    //@return Retorna la fecha en formato Date
    public static synchronized java.util.Date deStringToDate(String fecha) {
        SimpleDateFormat formatoDelTexto = new SimpleDateFormat("dd-MM-yyyy");
        Date fechaEnviar = null;
        try {
            fechaEnviar = formatoDelTexto.parse(fecha);
            return fechaEnviar;
        } catch (ParseException ex) {
            ex.printStackTrace();
            return null;
        }
    }

    public void buscarPrestamo() {
        // Abrir sección

        String cib = TxtCI_UsuarioB.getText();
        String nomb = TxtNombreC.getText();

        if ((!cib.equals("Ingrese Carnet") && !cib.equals(""))) {
            if ((!cib.equals("Ingrese Carnet") && !cib.equals(""))) {
                try {
                    Statement stm = reg.createStatement();
                    ResultSet counter = stm.executeQuery("SELECT * FROM usuario WHERE matricula LIKE '%" + cib + "%'");

                    int count = 0;
                    while (counter.next()) {
                        count++;
                    }
                    //JOptionPane.showMessageDialog(this,count);
                    String list[][] = new String[count][6];
                    int i = count;
                    ResultSet re = stm.executeQuery("SELECT * FROM usuario WHERE matricula LIKE '%" + cib + "%'");
                    while (re.next()) {

                        i--;
                        list[i][0] = re.getString("nombre");
                        list[i][1] = re.getString("apP");
                        list[i][2] = re.getString("apM");
                        list[i][3] = re.getString("matricula");
                        list[i][4] = re.getString("carrera");
                        String e = EstadoU(re.getString("matricula"));
                        if (e.equals("moroso")) {
                            list[i][5] = e;
                        } else {
                            if (e.equals("")) {
                                list[i][5] = "No Deudor";
                            } else {
                                list[i][5] = e;
                            }

                        }

                    }

                    P_UsuarioList.setModel(new javax.swing.table.DefaultTableModel(
                            list,
                            new String[]{
                                "NOMBRE", "A. PATERNO", "A. MATERNO", "CEDULA DE IDENTIDAD", "CARRERA", "ESTADO"
                            }));
                    P_UsuarioList.setDefaultRenderer(P_UsuarioList.getColumnClass(5), u);
                } catch (SQLException ex) {
                    Logger.getLogger(Usuario.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                if (!cib.equals("Ingrese Carnet") && !cib.equals("")) {
                    try {
                        Statement stm = reg.createStatement();
                        ResultSet counter = stm.executeQuery("SELECT * FROM `usuario` WHERE matricula LIKE '" + cib + "'");

                        int count = 0;
                        while (counter.next()) {
                            count++;
                        }
                        //JOptionPane.showMessageDialog(this,count);
                        String list[][] = new String[count][6];
                        int i = count;
                        ResultSet re = stm.executeQuery("SELECT * FROM `usuario` WHERE matricula LIKE '" + cib + "'");
                        while (re.next()) {

                            i--;
                            list[i][0] = re.getString("nombre");
                            list[i][1] = re.getString("apP");
                            list[i][2] = re.getString("apM");
                            list[i][3] = re.getString("matricula");
                            list[i][4] = re.getString("carrera");
                            list[i][5] = EstadoU(re.getString("matricula"));

                        }

                        P_UsuarioList.setModel(new javax.swing.table.DefaultTableModel(
                                list,
                                new String[]{
                                    "NOMBRE", "A. PATERNO", "A. MATERNO", "CEDULA DE IDENTIDAD", "CARRERA", "ESTADO"
                                }));
                        P_UsuarioList.setDefaultRenderer(P_UsuarioList.getColumnClass(5), u);
                    } catch (SQLException ex) {
                        Logger.getLogger(Usuario.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } else {
                    if (!nomb.equals("Ingrese Nombres") && !nomb.equals("")) {
                        try {
                            Statement stm = reg.createStatement();
                            ResultSet counter = stm.executeQuery("SELECT * FROM `usuario` WHERE nombre LIKE '" + nomb + "'");

                            int count = 0;
                            while (counter.next()) {
                                count++;
                            }

                            String list[][] = new String[count][6];
                            int i = count;
                            ResultSet re = stm.executeQuery("SELECT * FROM `usuario` WHERE nombre LIKE '" + nomb + "'");
                            while (re.next()) {

                                i--;
                                list[i][0] = re.getString("nombre");
                                list[i][1] = re.getString("apP");
                                list[i][2] = re.getString("apM");
                                list[i][3] = re.getString("matricula");
                                list[i][4] = re.getString("carrera");
                                list[i][5] = EstadoU(re.getString("matricula"));

                            }

                            P_UsuarioList.setModel(new javax.swing.table.DefaultTableModel(
                                    list,
                                    new String[]{
                                        "NOMBRE", "A. PATERNO", "A. MATERNO", "CEDULA DE IDENTIDAD", "CARRERA", "ESTADO"
                                    }));
                            P_UsuarioList.setDefaultRenderer(P_UsuarioList.getColumnClass(5), u);
                        } catch (SQLException ex) {
                            Logger.getLogger(Usuario.class.getName()).log(Level.SEVERE, null, ex);
                        }

                    }
                }
            }
        } else {

        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel BuscarLi;
    private javax.swing.JPanel BuscarLibroB;
    private javax.swing.JLabel BuscarUs;
    private javax.swing.JPanel Buscar_U;
    private javax.swing.JPanel CancelarP;
    private javax.swing.JPanel GuardarP;
    private javax.swing.JTable P_LibroList;
    private javax.swing.JTable P_UsuarioList;
    private javax.swing.JLabel Text2;
    private javax.swing.JLabel Text3;
    private javax.swing.JLabel Text4;
    private javax.swing.JLabel Text5;
    private javax.swing.JLabel Text6;
    private javax.swing.JLabel Text7;
    private javax.swing.JLabel Text8;
    private javax.swing.JLabel Text9;
    private javax.swing.JTextField TxtCI_UsuarioB;
    private javax.swing.JTextField TxtCI_UsuarioP;
    private javax.swing.JTextField TxtCodLibroP;
    private javax.swing.JTextField TxtDiasP;
    private javax.swing.JTextField TxtFechaP;
    private javax.swing.JTextField TxtNombreC;
    private javax.swing.JPanel body;
    private javax.swing.JLabel btn1;
    private javax.swing.JLabel btn2;
    private javax.swing.JComboBox<String> car_Lib;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JComboBox<String> selecCateg;
    private javax.swing.JLabel titu;
    // End of variables declaration//GEN-END:variables
}
